<?php
module_load_include('php', 'droop7', 'droop7_loader');

/**
 * Implements hook_init()
 * Bootstrap droop 7
 */
function droop7_init() {

    require_once __DIR__ . '/vendor/symfony/class-loader/Symfony/Component/ClassLoader/UniversalClassLoader.php';

    global $loader;

    if(_is_apc_cache_available()) {
        require_once __DIR__ . '/vendor/symfony/class-loader/Symfony/Component/ClassLoader/ApcUniversalClassLoader.php';
        $loader = new \Symfony\Component\ClassLoader\ApcUniversalClassLoader('apc.prefix.');
    } else {
        $loader = new \Symfony\Component\ClassLoader\UniversalClassLoader();
    }

    $symfony_components_path    = __DIR__ . '/vendor/symfony/';
    $loader->registerNamespaces(array(
        'Droop7'    => __DIR__ . '/src',
        'Symfony'   => array(
            $symfony_components_path . '/dependency-injection',
            $symfony_components_path . '/config',
            $symfony_components_path . '/filesystem'
        )
    ));

    $loader->register();
}

function droop7_get_block_view($delta, $extension) {

    global $container;

    $exploded_delta = explode('_', $delta);
    $container_key  = sprintf('%s.%s_builder', $extension, $exploded_delta[1]);

    $service_ids    = $container->getServiceIds();
    $builder_key    = array_search($container_key, $service_ids);

    if($builder_key !== FALSE) {
        $service_builder = $service_ids[$builder_key];
        return $container->get($service_builder)->buildBlockViews($delta);
    }

}

function droop7_update_blocks(&$blocks, $theme) {

    global $container;

    $service_ids = $container->getServiceIds();
    foreach($service_ids as $service_id) {
        if(strpos($service_id, '_builder') !== FALSE) {
            $builder = _get_service($service_id);
            $builder->alterBuildBlocks($blocks, $theme);
        }
    }
}

?>